// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package locations

import (
	json "encoding/json"
	staticData "github.com/EVE-Tools/static-data/lib/staticData"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations(in *jlexer.Lexer, out *Structure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "typeId":
			out.TypeID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "regionId":
			out.RegionID = int64(in.Int64())
		case "location":
			easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData(in, &out.Coordinates)
		case "typeName":
			out.TypeName = string(in.String())
		case "systemId":
			out.SystemID = int64(in.Int64())
		case "lastSeen":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastSeen).UnmarshalJSON(data))
			}
		case "systemName":
			out.SystemName = string(in.String())
		case "public":
			out.Public = bool(in.Bool())
		case "firstSeen":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FirstSeen).UnmarshalJSON(data))
			}
		case "regionName":
			out.RegionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations(out *jwriter.Writer, in Structure) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"typeId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TypeID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"regionId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RegionID))
	}
	{
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData(out, in.Coordinates)
	}
	{
		const prefix string = ",\"typeName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TypeName))
	}
	{
		const prefix string = ",\"systemId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SystemID))
	}
	{
		const prefix string = ",\"lastSeen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastSeen).MarshalJSON())
	}
	{
		const prefix string = ",\"systemName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SystemName))
	}
	{
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Public))
	}
	{
		const prefix string = ",\"firstSeen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.FirstSeen).MarshalJSON())
	}
	{
		const prefix string = ",\"regionName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RegionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Structure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Structure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Structure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Structure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations(l, v)
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData(in *jlexer.Lexer, out *staticData.Coordinates) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x":
			out.X = float64(in.Float64())
		case "y":
			out.Y = float64(in.Float64())
		case "z":
			out.Z = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData(out *jwriter.Writer, in staticData.Coordinates) {
	out.RawByte('{')
	first := true
	_ = first
	if in.X != 0 {
		const prefix string = ",\"x\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Z))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations1(in *jlexer.Lexer, out *CachedLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "expiresAt":
			out.ExpiresAt = int64(in.Int64())
		case "location":
			easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData1(in, &out.Location)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations1(out *jwriter.Writer, in CachedLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"expiresAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ExpiresAt))
	}
	{
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData1(out, in.Location)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CachedLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CachedLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CachedLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CachedLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations1(l, v)
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData1(in *jlexer.Lexer, out *staticData.Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "region":
			if in.IsNull() {
				in.Skip()
				out.Region = nil
			} else {
				if out.Region == nil {
					out.Region = new(staticData.Region)
				}
				easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData2(in, &*out.Region)
			}
		case "constellation":
			if in.IsNull() {
				in.Skip()
				out.Constellation = nil
			} else {
				if out.Constellation == nil {
					out.Constellation = new(staticData.Constellation)
				}
				easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData3(in, &*out.Constellation)
			}
		case "solar_system":
			if in.IsNull() {
				in.Skip()
				out.SolarSystem = nil
			} else {
				if out.SolarSystem == nil {
					out.SolarSystem = new(staticData.SolarSystem)
				}
				easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData4(in, &*out.SolarSystem)
			}
		case "station":
			if in.IsNull() {
				in.Skip()
				out.Station = nil
			} else {
				if out.Station == nil {
					out.Station = new(staticData.Station)
				}
				easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData5(in, &*out.Station)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData1(out *jwriter.Writer, in staticData.Location) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Region != nil {
		const prefix string = ",\"region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData2(out, *in.Region)
	}
	if in.Constellation != nil {
		const prefix string = ",\"constellation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData3(out, *in.Constellation)
	}
	if in.SolarSystem != nil {
		const prefix string = ",\"solar_system\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData4(out, *in.SolarSystem)
	}
	if in.Station != nil {
		const prefix string = ",\"station\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData5(out, *in.Station)
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData5(in *jlexer.Lexer, out *staticData.Station) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type_id":
			out.TypeId = int64(in.Int64())
		case "type_name":
			out.TypeName = string(in.String())
		case "last_seen":
			if in.IsNull() {
				in.Skip()
				out.LastSeen = nil
			} else {
				if out.LastSeen == nil {
					out.LastSeen = new(timestamp.Timestamp)
				}
				easyjson6601e8cdDecodeGithubComGolangProtobufPtypesTimestamp(in, &*out.LastSeen)
			}
		case "public":
			out.Public = bool(in.Bool())
		case "first_seen":
			if in.IsNull() {
				in.Skip()
				out.FirstSeen = nil
			} else {
				if out.FirstSeen == nil {
					out.FirstSeen = new(timestamp.Timestamp)
				}
				easyjson6601e8cdDecodeGithubComGolangProtobufPtypesTimestamp(in, &*out.FirstSeen)
			}
		case "coordinates":
			if in.IsNull() {
				in.Skip()
				out.Coordinates = nil
			} else {
				if out.Coordinates == nil {
					out.Coordinates = new(staticData.Coordinates)
				}
				easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData(in, &*out.Coordinates)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData5(out *jwriter.Writer, in staticData.Station) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.TypeId != 0 {
		const prefix string = ",\"type_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TypeId))
	}
	if in.TypeName != "" {
		const prefix string = ",\"type_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TypeName))
	}
	if in.LastSeen != nil {
		const prefix string = ",\"last_seen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComGolangProtobufPtypesTimestamp(out, *in.LastSeen)
	}
	if in.Public {
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Public))
	}
	if in.FirstSeen != nil {
		const prefix string = ",\"first_seen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComGolangProtobufPtypesTimestamp(out, *in.FirstSeen)
	}
	if in.Coordinates != nil {
		const prefix string = ",\"coordinates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData(out, *in.Coordinates)
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComGolangProtobufPtypesTimestamp(in *jlexer.Lexer, out *timestamp.Timestamp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "seconds":
			out.Seconds = int64(in.Int64())
		case "nanos":
			out.Nanos = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComGolangProtobufPtypesTimestamp(out *jwriter.Writer, in timestamp.Timestamp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seconds != 0 {
		const prefix string = ",\"seconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Seconds))
	}
	if in.Nanos != 0 {
		const prefix string = ",\"nanos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Nanos))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData4(in *jlexer.Lexer, out *staticData.SolarSystem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "security_status":
			out.SecurityStatus = float64(in.Float64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData4(out *jwriter.Writer, in staticData.SolarSystem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Id))
	}
	if in.SecurityStatus != 0 {
		const prefix string = ",\"security_status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SecurityStatus))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData3(in *jlexer.Lexer, out *staticData.Constellation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData3(out *jwriter.Writer, in staticData.Constellation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibStaticData2(in *jlexer.Lexer, out *staticData.Region) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibStaticData2(out *jwriter.Writer, in staticData.Region) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations2(in *jlexer.Lexer, out *AllStructures) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(AllStructures)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 Structure
			(v1).UnmarshalEasyJSON(in)
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations2(out *jwriter.Writer, in AllStructures) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v2Name))
			out.RawByte(':')
			(v2Value).MarshalEasyJSON(out)
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v AllStructures) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllStructures) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllStructures) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllStructures) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations2(l, v)
}
