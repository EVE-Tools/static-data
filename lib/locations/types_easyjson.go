// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package locations

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations(in *jlexer.Lexer, out *Structure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "typeId":
			out.TypeID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "regionId":
			out.RegionID = int64(in.Int64())
		case "location":
			easyjson6601e8cdDecode(in, &out.Coordinates)
		case "typeName":
			out.TypeName = string(in.String())
		case "systemId":
			out.SystemID = int64(in.Int64())
		case "lastSeen":
			out.LastSeen = string(in.String())
		case "systemName":
			out.SystemName = string(in.String())
		case "public":
			out.Public = bool(in.Bool())
		case "firstSeen":
			out.FirstSeen = string(in.String())
		case "regionName":
			out.RegionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations(out *jwriter.Writer, in Structure) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"typeId\":")
	out.Int64(int64(in.TypeID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"regionId\":")
	out.Int64(int64(in.RegionID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"location\":")
	easyjson6601e8cdEncode(out, in.Coordinates)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"typeName\":")
	out.String(string(in.TypeName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"systemId\":")
	out.Int64(int64(in.SystemID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lastSeen\":")
	out.String(string(in.LastSeen))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"systemName\":")
	out.String(string(in.SystemName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"public\":")
	out.Bool(bool(in.Public))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"firstSeen\":")
	out.String(string(in.FirstSeen))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"regionName\":")
	out.String(string(in.RegionName))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Structure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Structure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Structure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Structure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations(l, v)
}
func easyjson6601e8cdDecode(in *jlexer.Lexer, out *struct {
	X float64 "json:\"x\""
	Y float64 "json:\"y\""
	Z float64 "json:\"z\""
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x":
			out.X = float64(in.Float64())
		case "y":
			out.Y = float64(in.Float64())
		case "z":
			out.Z = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode(out *jwriter.Writer, in struct {
	X float64 "json:\"x\""
	Y float64 "json:\"y\""
	Z float64 "json:\"z\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"x\":")
	out.Float64(float64(in.X))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"y\":")
	out.Float64(float64(in.Y))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"z\":")
	out.Float64(float64(in.Z))
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations1(in *jlexer.Lexer, out *AllStructures) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(AllStructures)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 Structure
			(v1).UnmarshalEasyJSON(in)
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations1(out *jwriter.Writer, in AllStructures) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if !v2First {
				out.RawByte(',')
			}
			v2First = false
			out.String(string(v2Name))
			out.RawByte(':')
			(v2Value).MarshalEasyJSON(out)
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v AllStructures) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllStructures) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllStructures) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllStructures) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations1(l, v)
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations2(in *jlexer.Lexer, out *Constellation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations2(out *jwriter.Writer, in Constellation) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int64(int64(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Constellation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Constellation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Constellation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Constellation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations2(l, v)
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations3(in *jlexer.Lexer, out *SolarSystem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "securityStatus":
			out.SecurityStatus = float64(in.Float64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations3(out *jwriter.Writer, in SolarSystem) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int64(int64(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"securityStatus\":")
	out.Float64(float64(in.SecurityStatus))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SolarSystem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SolarSystem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SolarSystem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SolarSystem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations3(l, v)
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations4(in *jlexer.Lexer, out *Region) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations4(out *jwriter.Writer, in Region) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int64(int64(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Region) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Region) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Region) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Region) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations4(l, v)
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations5(in *jlexer.Lexer, out *Station) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "typeId":
			out.TypeID = int64(in.Int64())
		case "typeName":
			out.TypeName = string(in.String())
		case "lastSeen":
			out.LastSeen = string(in.String())
		case "public":
			out.Public = bool(in.Bool())
		case "firstSeen":
			out.FirstSeen = string(in.String())
		case "position":
			easyjson6601e8cdDecode(in, &out.Coordinates)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations5(out *jwriter.Writer, in Station) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int64(int64(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if in.TypeID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"typeId\":")
		out.Int64(int64(in.TypeID))
	}
	if in.TypeName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"typeName\":")
		out.String(string(in.TypeName))
	}
	if in.LastSeen != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lastSeen\":")
		out.String(string(in.LastSeen))
	}
	if in.Public {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"public\":")
		out.Bool(bool(in.Public))
	}
	if in.FirstSeen != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"firstSeen\":")
		out.String(string(in.FirstSeen))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"position\":")
		easyjson6601e8cdEncode(out, in.Coordinates)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Station) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Station) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Station) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Station) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations5(l, v)
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations6(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "station":
			(out.Station).UnmarshalEasyJSON(in)
		case "region":
			(out.Region).UnmarshalEasyJSON(in)
		case "solarSystem":
			(out.SolarSystem).UnmarshalEasyJSON(in)
		case "constellation":
			(out.Constellation).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations6(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"station\":")
		(in.Station).MarshalEasyJSON(out)
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"region\":")
		(in.Region).MarshalEasyJSON(out)
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"solarSystem\":")
		(in.SolarSystem).MarshalEasyJSON(out)
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"constellation\":")
		(in.Constellation).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations6(l, v)
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations7(in *jlexer.Lexer, out *CachedLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "expiresAt":
			out.ExpiresAt = int64(in.Int64())
		case "location":
			(out.Location).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations7(out *jwriter.Writer, in CachedLocation) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int64(int64(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"expiresAt\":")
	out.Int64(int64(in.ExpiresAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"location\":")
	(in.Location).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CachedLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CachedLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CachedLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CachedLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations7(l, v)
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations8(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(Response)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v3 Location
			(v3).UnmarshalEasyJSON(in)
			(*out)[key] = v3
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations8(out *jwriter.Writer, in Response) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v4First := true
		for v4Name, v4Value := range in {
			if !v4First {
				out.RawByte(',')
			}
			v4First = false
			out.String(string(v4Name))
			out.RawByte(':')
			(v4Value).MarshalEasyJSON(out)
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations8(l, v)
}
func easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations9(in *jlexer.Lexer, out *RequestLocationsBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "locationIDs":
			if in.IsNull() {
				in.Skip()
				out.Locations = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Locations = make([]int64, 0, 8)
				} else {
					out.Locations = []int64{}
				}
				for !in.IsDelim(']') {
					var v5 int64
					v5 = int64(in.Int64())
					out.Locations = append(out.Locations, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations9(out *jwriter.Writer, in RequestLocationsBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"locationIDs\":")
	if in.Locations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v6, v7 := range in.Locations {
			if v6 > 0 {
				out.RawByte(',')
			}
			out.Int64(int64(v7))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestLocationsBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestLocationsBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComEVEToolsStaticDataLibLocations9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestLocationsBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestLocationsBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComEVEToolsStaticDataLibLocations9(l, v)
}
